================================================================================
================================= Tema 2 - ASC =================================
============================== Petrescu Dragos 332CC ===========================
================================================================================

I. Descrierea implementarii

1. Blas
- am adaugat in proiect header-ul cblas.h de pe site-ul oficial.
- am linkat biblioteca la execuabil din Makefile


2. Solver Neop
- am obserat ca voi inmulti tot timpul linie cu linie, datorita transpunerii
- elementul real de pe linia i si coloana c se afla la A[2 * (l * N + c)] iar
  cel ireal se afla la A[2 * (l * N + c) + 1]
  -> 2 * l * N sare peste l linii iar 2 * c sare peste c elemente
- inmultirea se face clasic, utilizand 3 for-uri
- datorita simetriei, merg doar deasupra diagonalei principale
- inmultirea se realizeaza clasic dupa formula:
    (a + ib) * (c + id) = (a*c - b*d) + (a*d + b * c)i

3. Solver Opt C
- initial am copiat codul de la Solver Neop apoi am aplicat cateva metode de
  optimizare invatate in cadrul laboratorului 5:

  -> Detectarea constantelor din bucle
    * am observat ca in cadrul calculului unui element, partea sa reala si
      partea sa imaginara sunt constante in cadrul ciclului interior i. Astfel
      ca le-am inlocuit cu 2 variabile de tip registru.

  -> Accesul la vectori
    * am redus timpul de acces la datele din vector utilizand pointeri in vector
    * Pentru cazul neoptimizat, la calculul unui singur element avem:
        18 * N inmultiri si 14 * N adunari, doar pentru obtinerea datelor
    * Pentru cazul neoptimizat, la calculul unui singur element avem:
        4 * N adunari si cateva accese la vector pentru initializarea
        pointerilor (aceste initializari se intampla mult mai rar, neffind atat
        de adanc asezare in structura de for-uri).

4. Solver Opt F
- am utilizat codul de la Solver Neop si am adaugat flag-uri
    -> gcc
        * am adaugat flag-ul -Ofast. In spate el utilizeaza urmatoarele flag-uri:
          - O3 -> optimizare de nivel maxim fara sa se scada din precizie
          - ffast-math -> nu mai este conform cu IEEE
                       -> reordoneaza operatii (pot aparea erori in floating
                            point)
                       -> considera ca nu exista infinit
                       -> face diferite aproximari
        * nu am obtinut diferente mai mari 10^-3

    -> icc
        * am folosit flag-ul -Ofast, echivalentul lui -Ofast din gcc


II. Analiza performantei
A. gcc - blas vs neopt vs opt_m vs opt_f

    blas CPU Time :   9.360s
    neopt CPU Time: 167.707s
    opt_m CPU Time:  84.695s
    opt_f CPU Time:  36.458s

Observam ca varianta blas este de:
 18 ori mai rapida decat varianta neopt
 9 ori mai rapida decat varianta opt_m
 4 ori mai rapida decat varianta opt_f

 Observam ca varianta opt_m este de:
  2 ori mai inceata decat varianta opt_f
  2 ori mai rapida decat varianta opt_neopt

Analize comparative, doua cate doua se gasesc in folderul analize/ sub forma
de screenshot-uri


B. icc - blas vs neopt vs opt_m vs opt_f

    blas CPU Time :   9.440s
    neopt CPU Time: 168.918s
    opt_m CPU Time:  88.629s
    opt_f CPU Time:  29.550s

Observam ca varianta blas este de:
 18 ori mai rapida decat varianta neopt
 9 ori mai rapida decat varianta opt_m
 4 ori mai rapida decat varianta opt_f

 Observam ca varianta opt_m este de:
  2 ori mai inceata decat varianta opt_f
  3 ori mai rapida decat varianta opt_neopt

Analize comparative, doua cate doua se gasesc in folderul analize/ sub forma
de screenshot-uri


C. gcc vs icc

1. blas
    gcc este cu 1.52% mai rapid.

2. neopt
    gcc este cu 0.68% mai rapid.

3. opt_m
    gcc este cu 4.38% mai rapid.

4. opt_f
    icc este cu 18.66 mai rapid.

Concluzie: icc are flag-uri mult mai bine optimizate dar gcc este mai rapid fara
flag-uri.